class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        N=len(grid)
        visit=set()
        minH=[[grid[0][0],0,0]]
        #print(minH)
        directions=[[0 ,1],[0 ,-1],[1, 0],[-1, 0]]
        visit.add((0,0))
        while minH:
            time,r,c= heapq.heappop(minH)
            print(time,r,c)
            if r==N-1 and c==N-1:
                return time
            for dr,dc in directions:
                neiR,neiC = r+dr,c+dc
                print(neiR,neiC)
                if(neiR<0 or neiC<0 or neiR==N or neiC==N or (neiR,neiC) in visit):
                    continue
                visit.add((neiR,neiC))
                heapq.heappush(minH,[max(time,grid[neiR][neiC]),neiR,neiC])
                
         
        

        
        